{-# LANGUAGE OverloadedStrings #-}

module Test.Botan.Low.PwdHash (tests) where

import           Botan.Low.PwdHash
import           Data.ByteString
import           Test.Prelude
import           Test.Tasty
import           Test.Tasty.Hspec

tests :: IO TestTree
tests = do
    specs <- testSpec "spec_pwdhash" spec_pwdhash
    pure $ testGroup "Test.Botan.Low.PwdHash" [
        specs
      ]

-- NOTE: Needs more exhaustive tests, and to validate parameter order for
--  Scrypt and the Argons. We've got tests that pass, but that doesn't
--  mean that they're being used properly. Need to investigate C++ source.

-- NOTE: Values generated by "pwdhashTimed pbkdf 200 64 passphrase salt"
pbkdfs :: [(PBKDFName, Int, Int, Int)]
pbkdfs =
    [ ("PBKDF2(HMAC(SHA-512))",138000,0,0)
    -- NOTE: These results indicate that the parameter result order is inconsistent
    --  for pwdhashTimed compared to pwdhash
    --  Eg, Scrypt should be n, r, p but n=8192 is clearly last
    --  Same for the argons
    -- This causes both tests to fail (original generated values)
    -- , ("Scrypt",1,81,8192)
    -- , ("Argon2d",1,1,262144)
    -- , ("Argon2i",1,1,262144)
    -- , ("Argon2id",1,1,262144)
    -- Note that this still causes four pwdhashTimed tests to still fail because
    --  the pwdhashTimed function itself needs to be fixed for these algorithms
    --  Fixed values, assuming only x/z are flipped a la (x,y,z) -> (z,y,x)
    --  But
    , ("Scrypt",8192,81,1)
    , ("Argon2d",262144,1,1)
    , ("Argon2i",262144,1,1)
    , ("Argon2id",262144,1,1)
    , ("Bcrypt-PBKDF",26,0,0)
    , ("OpenPGP-S2K(SHA-512)",65011712,0,0)
    ]

passphrase :: ByteString
passphrase = "Fee fi fo fum!"

salt :: ByteString
salt = "salt"

spec_pwdhash :: Spec
spec_pwdhash = testSuite pbkdfs (\(n,_,_,_) -> chars n) $ \ (pbkdf, iterations, parallelism, memoryParam) -> do
    it "pwdhash" $ do
        _ <- pwdhash pbkdf iterations parallelism memoryParam 64 passphrase salt
        pass
    it "pwdhashTimed" $ do
        _timed@(iterations', parallelism', memoryParam', pwd) <- pwdhashTimed pbkdf 200 64 passphrase salt
        -- For Argon2 and Scrypt functions' botan_pwdhash_timed returns
        -- parameters in a different order than what botan_pwdhash takes in
        -- https://github.com/randombit/botan/issues/2144
        --
        -- botan_pwdhash_timed always returns parameters in this order:
        -- (iterations, parallelism, memoryParam)
        --
        -- Argon2 function takes parameters in this order:
        -- M = memoryParam
        -- t = iterations
        -- p = parallelism
        --
        -- Scrypt function takes parameters in this order:
        -- N = memoryParam
        -- r = iterations
        -- p = parallelism
        --
        -- Sources of truth from Botan source code:
        -- botan/src/lib/pbkdf/argon2/argon2.h
        -- botan/src/lib/pbkdf/scrypt/scrypt.h
        -- botan/src/lib/ffi/ffi_kdf.cpp
        pwd' <- case pbkdf of
            "Scrypt"                        -> pwdhash pbkdf memoryParam' iterations' parallelism' 64 passphrase salt
            _ | "Argon" `isPrefixOf` pbkdf  -> pwdhash pbkdf memoryParam' iterations' parallelism' 64 passphrase salt
            _                               -> pwdhash pbkdf iterations' parallelism' memoryParam' 64 passphrase salt
        pwd `shouldBe` pwd'
        pass
